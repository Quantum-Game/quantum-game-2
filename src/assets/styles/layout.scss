$unit: 4px;

[layout] {
    display: flex;
    align-items: stretch;
    
    > * + * {
        margin-left: calc(var(--layout-spacing) * var(--is-row-child));
        margin-top: calc(var(--layout-spacing) * var(--is-column-child));
    }
}

[layout] > * {
    flex-shrink: 0;
}

[flex] { flex: 1; }

@mixin define-spacing($attr, $name, $size) {
    [#{$attr}~="#{$name}"] {
        --layout-spacing: #{$size}
    }
}

@mixin maybe-media($media) {
    @if $media == "" {
        @content
    } @else {
        @include media($media) {
            @content
        }
    }
}

@mixin define-layout($attr, $media) {
    @include maybe-media($media) {
        [#{$attr}~=column] {
            flex-direction: column;
            > * {
                --is-row-child: 0;
                --is-column-child: 1;
            }
        }
        [#{$attr}~=row] {
            flex-direction: row;
            > * {
                --is-row-child: 1;
                --is-column-child: 0;
            }
        }

        [#{$attr}~=start] { align-items: flex-start; }
        [#{$attr}~=end] { align-items: flex-end; }
        [#{$attr}~=center] { align-items: center; }
        [#{$attr}~=middle] { justify-content: center; }
        [#{$attr}~=around] { justify-content: space-around; }
        [#{$attr}~=between] { justify-content: space-between; }
        
        @include define-spacing($attr, u1, $unit * 1);
        @include define-spacing($attr, u2, $unit * 2);
        @include define-spacing($attr, u4, $unit * 4);
        @include define-spacing($attr, u5, $unit * 5);
    }
}

// Layouts are defined as mobile-first,
// that means `layout` is the default one for all screens,
// and overrides are made for progressively bigger screen sizes,
// e.g. layout-md defining layout for medium up.
 
@include define-layout("layout", "");
@include define-layout("layout-md", ">=medium");
@include define-layout("layout-lg", ">=large");
@include define-layout("layout-xl", ">=xlarge");
